extends layout

block content
  #app
    #character
      .row
        h1.col
          input(v-model="character.name", placeholder="Harmonious Jade")
      .row
        label.col
          input(type="text", v-model="character.concept", placeholder="Concept")
        label.col
          | Player:
          input(v-model="character.player", placeholder="")
      .row
        label.col
          | Character type:
          select(v-model="character.characterType")
            option(v-for="(value, key) in characterTypes", :value="key") {{ key | capitalize }}
          | Anima:
          input(type="text", v-model="character.anima")

    #attributes
      h2.row.col Attributes
      .row
        .sheet.col-9

    #abilities
      h2.row.col Abilities
      .row
        .sheet.col-9
          .row
            abilities.col(:abilities="abilities", :caste-abilities="characterTypes[character.characterType].castes[character.caste]", :abilities-selected="abilitiesSelected")
        .data.col-3
          .row
            p {{ abilitiesSelected }}
            p {{ abilityPointsSpent }}
            p TODO: stress test ability point calculator

    #merits
      h2.row.col Merits
      .row
        .sheet.col-9
          .row
            merits.col(:merits="merits")
        .data.col-3
          .row
            p test

    #intimacies.row


      #attributes
        .row
          h2.col Attributes
        .row
          .sheet.col-9.row
            .attributeGroup.col-md-4(v-for="(value, group) in attributes")
              h3 {{ group | capitalize }}
              //p {{group}} - {{ value }}
              //p {{ attributeAllocations[group] }}

              .btn-group.btn-group-sm(role="group", data-toggle="buttons")
                label.btn.btn-outline-info(v-for="priority in ['primary', 'secondary', 'tertiary']", :class="{ active : attributePriority[group] == priority  }")
                  input(type="radio", :value="priority", @click="changeAttributePriority(group, priority)", autocomplete="off")
                  | {{ priority }}
              dotscale(v-for="(value, key) in attributes[group]", :value="value", :stat="key", :type="'attribute'", @input="attributes[group][key] = arguments[0]")
              p points remaining: {{ attributePointsSpent[group].remaining }}
              p BP spent: {{ attributePointsSpent[group].bonusPointsSpent }}
          .data.col-3
            .physical
              h5 Physical ({{ attributePriority['physical'] }})
              p {{ attributePointsSpent['physical'] }}
            .mental
              h5 mental ({{ attributePriority['mental'] }})
              p {{ attributePointsSpent['mental'] }}
            .social
              h5 Social ({{ attributePriority['social'] }})
              p {{ attributePointsSpent['social'] }}






    #intimacies.row
      h2.col-xs-12.text-xs-center Intimacies
      .sheet.col-md-9
        .row
          draggable.intimacies(@start="dragging=true", @end="dragging=false")
            .intimacy(v-for="intimacy in intimacies.selected") {{ intimacy.details }} - {{intimacy.level | capitalize }} {{ intimacy.type | capitalize }}
          .new.input-group.col-xs-12
            input.form-control(type="text", placeholder="details", v-model="intimacies.new.details")
            span.input-group-addon
              template(v-for="each in ['minor', 'major', 'defining']")
                label.form-check-inline
                  input.form-check-input(type="radio", name="newIntimacyLevel", :value="each", v-model="intimacies.new.level")
                  | {{ each }}
            span.input-group-addon
              template(v-for="each in ['principle', 'tie']")
                label.form-check-inline
                  input.form-check-input(type="radio", name="newIntimacyType", :value="each", v-model="intimacies.new.type")
                  | {{ each }}
            span.input-group-btn
              button.btn.btn-primary(type="button", @click="intimacies.selected.push(intimacies.new); intimacies.new = {}") Add
